{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PeopleForm","newName","newNumber","addContact","setNewName","setNewNumber","onSubmit","value","onChange","event","target","type","Person","name","number","id","removeContact","onClick","People","people","map","person","key","FilterContacts","setFilterBy","Message","props","shouldShow","message","style","color","fontSize","borderStyle","borderRadius","padding","marginBottom","PhoneBook","useState","contacts","setContacts","filterBy","filteredContacts","filter","contact","includes","useEffect","axios","get","then","response","data","setMessage","shouldMessage","setShouldMessage","showMessage","setTimeout","window","confirm","delete","preventDefault","alert","find","updatedContact","put","i","noteObject","post","concat","catch","error","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.56eca461.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst PeopleForm = ({\r\n  newName,\r\n  newNumber,\r\n  addContact,\r\n  setNewName,\r\n  setNewNumber,\r\n}) => (\r\n  <form onSubmit={addContact}>\r\n    <fieldset>\r\n      <legend>Add Contact</legend>\r\n      <div>\r\n        Name{\" \"}\r\n        <input\r\n          value={newName}\r\n          onChange={(event) => {\r\n            setNewName(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        Number{\" \"}\r\n        <input\r\n          value={newNumber}\r\n          onChange={(event) => {\r\n            setNewNumber(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\"> Add </button>\r\n      </div>\r\n    </fieldset>\r\n  </form>\r\n);\r\n\r\nconst Person = ({ name, number, id, removeContact }) => (\r\n  <li>\r\n    {name} {number}{\" \"}\r\n    <button\r\n      onClick={() => {\r\n        removeContact(id, name);\r\n      }}\r\n    >\r\n      {\" \"}\r\n      Delete{\" \"}\r\n    </button>\r\n  </li>\r\n);\r\n\r\nconst People = ({ people, removeContact }) => (\r\n  <ul>\r\n    {people.map((person) => (\r\n      <Person\r\n        key={person.id}\r\n        name={person.name}\r\n        number={person.number}\r\n        id={person.id}\r\n        removeContact={removeContact}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst FilterContacts = ({ setFilterBy }) => (\r\n  <div>\r\n    Filter{\" \"}\r\n    <input\r\n      onChange={(event) => {\r\n        setFilterBy(event.target.value);\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst Message = (props) => {\r\n  const { shouldShow, message } = props;\r\n  const styles = {\r\n    color: \"green\",\r\n    fontSize: 20,\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  };\r\n  if (shouldShow && true) {\r\n    return <div style={styles}> {message} </div>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst PhoneBook = (props) => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [filterBy, setFilterBy] = useState(\"\");\r\n  const filteredContacts = contacts.filter(\r\n    (contact) => !!contact.name && contact.name.includes(filterBy)\r\n  );\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:3001/persons\").then((response) => {\r\n      setContacts(response.data);\r\n    });\r\n  }, []);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const [shouldMessage, setShouldMessage] = useState(false);\r\n  const showMessage = (message) => {\r\n    setMessage(message);\r\n    setShouldMessage(true);\r\n    setTimeout(() => {\r\n      setShouldMessage(false);\r\n      setMessage(\"\");\r\n    }, 3000);\r\n  };\r\n\r\n  const addContact = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (newNumber === \"\" || newName === \"\") {\r\n      alert(\"something is missing\");\r\n    } else if (contacts.map((contact) => contact.name).includes(newName)) {\r\n      /*\r\n      alert(`${newName} already added to phonebook`);\r\n      setContacts(contacts);\r\n      */\r\n      if (\r\n        window.confirm(\r\n          `${newName} already added, want to change the number?`\r\n        ) === true\r\n      ) {\r\n        const contact = contacts.find((contact) => contact.name === newName);\r\n        const updatedContact = {\r\n          name: contact.name,\r\n          number: newNumber,\r\n        };\r\n        axios\r\n          .put(`http://localhost:3001/persons/${contact.id}`, updatedContact)\r\n          .then((response) => {\r\n            setContacts(\r\n              contacts.map((i) =>\r\n                contact === i ? { ...updatedContact, id: contact.id } : i\r\n              )\r\n            );\r\n            showMessage(`${newName} phone number updated to ${newNumber}`);\r\n            setNewName(\"\");\r\n            setNewNumber(\"\");\r\n          });\r\n      } else {\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n      }\r\n    } else {\r\n      const noteObject = {\r\n        number: newNumber,\r\n        name: newName,\r\n      };\r\n      axios\r\n        .post(\"http://localhost:3001/persons\", noteObject)\r\n        .then((response) => {\r\n          setContacts(contacts.concat(response.data));\r\n          showMessage(`${newName} added to contacts list`);\r\n          setNewNumber(\"\");\r\n          setNewName(\"\");\r\n        })\r\n        .catch((error) => {\r\n          showMessage(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const removeContact = (id, name) => {\r\n    if (window.confirm(`Are you sure you want to delete ${name}`)) {\r\n      axios.delete(`http://localhost:3001/persons/${id}`).then((response) => {\r\n        setContacts(contacts.filter((contact) => contact.id !== id));\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2> Phonebook </h2>\r\n      <Message shouldShow={shouldMessage} message={message} />\r\n      <FilterContacts setFilterBy={setFilterBy} />\r\n      <People people={filteredContacts} removeContact={removeContact} />\r\n      <PeopleForm\r\n        newName={newName}\r\n        newNumber={newNumber}\r\n        addContact={addContact}\r\n        setNewName={setNewName}\r\n        setNewNumber={setNewNumber}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PhoneBook></PhoneBook>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}